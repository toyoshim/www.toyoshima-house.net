import java.applet.Applet;import java.awt.*;import java.awt.image.*;public class Qfive extends Applet implements Runnable{  static int MAX_ENEMY = 100;  String UPDATE_FREQ;  int UPDATE;  class Sprite{    int x, y;    int num;    int ax, ay;    public void Sprite(){      x = y = num = ax= ay = 0;    }    public synchronized void draw(){      int dx, dy;      switch( num ){      case 1:	for( dx = -7; dx<8; dx++ )	  for( dy = -7; dy<8; dy++ )	    VRAM[(x+dx)|(y+dy)<<8] = 0xfffffff;	break;      case 0x80:	for( dx = -2; dx<3; dx++ )	  for( dy = -2; dy<3; dy++ )	    VRAM[(x+dx)|(y+dy)<<8] = 0xffff8080;	break;      case 0x81:	for( dx = -5; dx<6; dx++ )	  for( dy = -5; dy<6; dy++ )	    VRAM[(x+dx)|(y+dy)<<8] = 0xffe06060;	break;      case 0x82:	for( dx = -1; dx<2; dx++ )	  for( dy = -1; dy<2; dy++ )	    VRAM[(x+dx)|(y+dy)<<8] = 0xff6060e0;	break;      }    }    public synchronized void ctrl(){      if( KEY_UP && ( y>10 ) ) y-=1;      if( KEY_DOWN && ( y<190 ) ) y+=1;      if( KEY_RIGHT && ( x<246 ) ) x+=1;      if( KEY_LEFT && ( x>10 ) ) x-=1;    }  }  class MyShot{    int x[] = new int[8] , y[] = new int[8];    int ptr = 0;    int cl[] = new int[8];    public void init( int mx, int my ){      int i;      for( i = 0; i<8; i++ ){	x[i] = mx;	y[i] = my;	cl[i] = 0xff000000|(i<<20)|(i<<13)|(i<<4);      }    }    public synchronized void set( int mx, int my ){      x[ptr] = mx;      y[ptr] = my;      ptr += 1;      ptr &= 7;    }    public synchronized void draw(){      int i, j;      int n;      int d;      n = ptr;      for( j = 0; j<8; j++ ){	for( i = 0; i<y[n]; i++ ){	  VRAM[(x[n]-4)|i<<8] |= cl[j];	  VRAM[(x[n]+4)|i<<8] |= cl[j];//	  d = (y[n]-i)/2;//	  if( x[n]-d>0 )//	    VRAM[(x[n]-d)|i<<8] |= cl[j];//	  if( x[n]+d<256 )//	    VRAM[(x[n]+d)|i<<8] |= cl[j];	}	n += 1;	n &= 7;      }    }  }  Image Img = null;  static int VRAM[];  int i;  Thread thread = null;  static int EvStat;  static int sx[] = new int[20], sy[] = new int[20], sa[] = new int [20];  static int sc[] = new int[20];  static int star_color1[] = new int[4];  static int star_color2[] = new int[4];  static int star_color3[] = new int[4];  Sprite myship = new Sprite();  static boolean KEY_UP = false, KEY_DOWN = false;  static boolean KEY_RIGHT = false, KEY_LEFT = false;  MyShot myshot = new MyShot();  Sprite enemy[] = new Sprite[MAX_ENEMY];  int enemy_num = 0;  int count, count2;  public synchronized void collision(){    int i;    for( i = 0; i<enemy_num; i++ ){      if( ( Math.abs( myship.x - enemy[i].x ) < 2 ) &&	 ( Math.abs( myship.y - enemy[i].y ) < 3 ) ){	EvStat = 3;	break;      }    }  }  public synchronized void bg_init(){    int i;    for( i = 0; i<20; i++ ){      sx[i] = ( int )( Math.random()*256 );      sy[i] = ( int )( Math.random()*200 );      sa[i] = ( int )( Math.random()*4 ) + 1;      sc[i] = ( int )( Math.random()*4 );    }    star_color1[0] = 0xffffffff;    star_color1[1] = 0xffff80d0;    star_color1[2] = 0xffd0d0ff;    star_color1[3] = 0xffffff80;    star_color2[0] = 0xffa0a0a0;    star_color2[1] = 0xffa05090;    star_color2[2] = 0xff9090a0;    star_color2[3] = 0xffa0a050;    star_color3[0] = 0xff404040;    star_color3[1] = 0xffa02050;    star_color3[2] = 0xff404050;    star_color3[3] = 0xff505020;  }  public synchronized void bg_move(){    int i;    for( i = 0; i<20; i++ ){      sy[i] += sa[i];      if( sy[i] >= 200-2 ){	sy[i] = 0;	sx[i] = ( int )( Math.random()*256 );	sa[i] = ( int )( Math.random()*4 ) + 1;	sc[i] = ( int )( Math.random()*4 );      }    }  }  public synchronized void bg_draw(){    int i;    for( i = 0; i<256*200; i++ )      VRAM[i] = 0xff000030;    for( i = 0; i<20; i++ ){      VRAM[sx[i]|(sy[i]+0)<<8] = star_color3[sc[i]];      VRAM[sx[i]|(sy[i]+1)<<8] = star_color2[sc[i]];      VRAM[sx[i]|(sy[i]+2)<<8] = star_color1[sc[i]];    }  }  public synchronized void enemy_appear(){    int fortune;    count++;    if( count > 500 ){      count = 0;      if( count2 != 0 ) 	count2--;    }    fortune = ( int )( Math.random()*10 );    if( fortune > 7 ) return;    if( enemy_num == MAX_ENEMY ) return;    if( fortune >= count2 )      enemy[enemy_num].num = 0x81;    else      enemy[enemy_num].num = 0x80;    enemy[enemy_num].x = ( int )( Math.random() * 240 ) + 8;    enemy[enemy_num].y = 10;    enemy[enemy_num].ax = ( int )( Math.random() * 4 ) - 2;    enemy[enemy_num].ay = ( int )( Math.random() * 1 ) + 2;    enemy_num++;  }  public synchronized void enemy_move(){    int i, j;    for( i = 0; i<enemy_num; i++ ){      enemy[i].x += enemy[i].ax;      enemy[i].y += enemy[i].ay;      if( ( enemy[i].x<8 )||( enemy[i].x>248 )||( enemy[i].y>192 ) ){	enemy_num--;	enemy[i].x = enemy[enemy_num].x;	enemy[i].y = enemy[enemy_num].y;	enemy[i].ax = enemy[enemy_num].ax;	enemy[i].ay = enemy[enemy_num].ay;	enemy[i].num = enemy[enemy_num].num;	enemy[enemy_num].num = 0;	i--;	continue;      }      if( ( enemy[i].num == 0x81 ) && ( EvStat == 2 ) ){	if( ( Math.abs( enemy[i].x - myship.x ) < 8 ) &&	   ( enemy[i].y < myship.y ) ){	  int ex = enemy[i].x;	  int ey = enemy[i].y;	  int eax = enemy[i].ax;	  int eay = enemy[i].ay;	  enemy[i].ay -= 1;	  enemy[i].num = 0x82;	  enemy[i].draw();	  for( j = 0; j<10; j++ ){	    if( enemy_num == MAX_ENEMY )	      break;	    enemy[enemy_num].num = 0x82;	    enemy[enemy_num].x = ex;	    enemy[enemy_num].y = ey;	    enemy[enemy_num].ax = eax + ( int )( Math.random()*4 ) - 2;	    enemy[enemy_num].ay = eay + ( int )( Math.random()*4 ) - 2;	    if( ( enemy[enemy_num].ax == 0 ) && ( enemy[enemy_num].ay == 0 ) )	      enemy[enemy_num].ay = 1;	    enemy_num++;	  }	}      }    }  }  public synchronized void Game(){    int i;    switch( EvStat ){    case 0://init      count = 0;      count2 = 7;      bg_init();      myship.x = 128;      myship.y = 150;      myship.num = 1;      myshot.init( myship.x, myship.y );      for( i = 0; i<MAX_ENEMY; i++ )	enemy[i].num = 0;      enemy_num = 0;      EvStat++;      break;    case 1://title      bg_move();      break;    case 2://game      collision();      bg_move();      enemy_appear();      myship.ctrl();      myshot.set( myship.x, myship.y );      enemy_move();      break;    case 3://game over    case 4:      bg_move();      enemy_appear();      enemy_move();      break;    }  }  public synchronized void start(){    EvStat = 0;    UPDATE_FREQ = getParameter( "update" );    UPDATE = Integer.valueOf( UPDATE_FREQ ).intValue();    if( thread == null ){      thread = new Thread( this );      thread.setPriority( Thread.MAX_PRIORITY );      thread.start();    }  }  public void stop(){    if( thread != null )      thread.stop();    thread = null;  }  public synchronized void init(){    VRAM = new int[256*200];    for( i = 0; i<MAX_ENEMY; i++ )      enemy[i] = new Sprite();    for( i = 0; i<256*200; i++ )      VRAM[i] = 0xff000000;    Img = createImage( new MemoryImageSource( 256, 200, VRAM, 0, 256 ) );  }  public void run(){    int i;    while( true ){      for( i = 0; i<UPDATE; i++ )	Game();      try{	thread.sleep( 50*UPDATE );      } catch( InterruptedException e ){}    }  }  public static void main( String args[] ){    Frame f = new Frame( "9five for java" );    Qfive qv = new Qfive();    f.resize( 256, 200 );    f.add( "Center", qv );    f.show();    qv.init();  }  public synchronized void paint( Graphics g ){    update( g );  }  public synchronized void update( Graphics g ){    int i;    if( Img != null ){      switch( EvStat ){      case 1:	bg_draw();	break;      case 2:	bg_draw();	for( i = 0; i<enemy_num; i++ )	  enemy[i].draw();	myshot.draw();	myship.draw();	break;      case 3:      case 4:	bg_draw();	for( i = 0; i<enemy_num; i++ )	  enemy[i].draw();	break;      }      Img.flush();      g.drawImage( Img, 0, 0, this );    }  }  public synchronized boolean keyDown( Event evt, int key ){    switch( key ){    case Event.UP:      KEY_UP = true;      break;    case Event.DOWN:      KEY_DOWN = true;      break;    case Event.RIGHT:      KEY_RIGHT = true;      break;    case Event.LEFT:      KEY_LEFT = true;      break;    case ' ':      if( EvStat == 1 )	EvStat = 2;      else if( EvStat == 3 )	EvStat = 4;      break;    }    return true;  }  public synchronized boolean keyUp( Event evt, int key ){    switch( key ){    case Event.UP:      KEY_UP = false;      break;    case Event.DOWN:      KEY_DOWN = false;      break;    case Event.RIGHT:      KEY_RIGHT = false;      break;    case Event.LEFT:      KEY_LEFT = false;      break;    case ' ':      if( EvStat == 4 )	EvStat = 0;      break;    }    return true;  }}